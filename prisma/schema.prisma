// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  COURSE_AUDITOR
  ADMIN
  SUPER_ADMIN
}

enum CourseType {
  PATHWAY
  BREADTH
  ELECTIVE
  OUTSIDE_ELECTIVE
  OTHER
}

model User {
  id          String       @id @default(uuid())
  firstName   String
  lastName    String
  email       String       @unique
  password    String
  role        UserRole
  reviews     Review[]
  sessions    Session[]
  resetTokens ResetToken[]
  created     DateTime     @default(now())
  updated     DateTime     @updatedAt
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model ResetToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
  created   DateTime @default(now())
  updated   DateTime @updatedAt
}

model Certificate {
  id              String                      @id @default(uuid())
  name            String
  description     String?
  courses         CertificateCourse[]
  specializations CertificateSpecialization[]
  reviews         Review[]
  created         DateTime                    @default(now())
  updated         DateTime                    @updatedAt
}

model CertificateCourse {
  id            String      @id @default(uuid())
  certificate   Certificate @relation(fields: [certificateId], references: [id])
  certificateId String
  course        Course      @relation(fields: [courseId], references: [id])
  courseId      String
  type          CourseType
  created       DateTime    @default(now())
  updated       DateTime    @updatedAt
}

model CertificateSpecialization {
  id               String         @id @default(uuid())
  certificate      Certificate    @relation(fields: [certificateId], references: [id])
  certificateId    String
  specialization   Specialization @relation(fields: [specializationId], references: [id])
  specializationId String
  created          DateTime       @default(now())
  updated          DateTime       @updatedAt
}

model Specialization {
  id           String                      @id @default(uuid())
  name         String
  description  String?
  difficulty   Float?
  courses      Course[]
  certificates CertificateSpecialization[]
  reviews      Review[]
  slug         String                      @unique
  created      DateTime                    @default(now())
  updated      DateTime                    @updatedAt
}

model Course {
  id                       String              @id @default(uuid())
  name                     String
  code                     String?
  description              String?
  certificates             CertificateCourse[]
  officialTimeEstimation   Float?
  officialDifficultyRating Float?
  prerequisites            String
  specialization           Specialization?     @relation(fields: [specializationId], references: [id])
  specializationId         String?
  reviews                  Review[]
  slug                     String              @unique
  created                  DateTime            @default(now())
  updated                  DateTime            @updatedAt
}

model Review {
  id               String          @id @default(uuid())
  user             User            @relation(fields: [userId], references: [id])
  userId           String
  comment          String?
  timeTaken        Float?
  rating           Int
  difficultyRating Int?
  instructorRating Int?
  specialization   Specialization? @relation(fields: [specializationId], references: [id])
  specializationId String?
  course           Course?         @relation(fields: [courseId], references: [id])
  courseId         String?
  certificate      Certificate?    @relation(fields: [certificateId], references: [id])
  certificateId    String?
  created          DateTime        @default(now())
  updated          DateTime        @updatedAt
}
